// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/dotnet
{
  "name": "C# (.NET) Umbraco & SMTP4Dev",

  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  "image": "mcr.microsoft.com/devcontainers/dotnet:1-9.0-bookworm",

  "containerEnv": {
    "ConnectionStrings__umbracoDbDSN": "Data Source=|DataDirectory|/Umbraco.sqlite.db;Cache=Shared;Foreign Keys=True;Pooling=True",
    "ConnectionStrings__umbracoDbDSN_ProviderName": "Microsoft.Data.Sqlite",
    "Umbraco__CMS__Security__BackOfficeHost": "https://127.0.0.1:44339",
    "Umbraco__CMS__Unattended__InstallUnattended": "true",
    "Umbraco__CMS__Unattended__UnattendedUserName": "Admin",
    "Umbraco__CMS__Unattended__UnattendedUserEmail": "test@umbraco.com",
    "Umbraco__CMS__Unattended__UnattendedUserPassword": "password1234",
    "Umbraco__CMS__Global__Smtp__Host": "smtp4dev",
    "Umbraco__CMS__Global__Smtp__Port": "25",
    "Umbraco__CMS__Global__Smtp__From": "noreply@umbraco.test"
  },

  "features": {
    // Adds SSH support to the container
    // Allowing the Github CLI `gh codespace ssh` to work
    "ghcr.io/devcontainers/features/sshd:1": {
      "version": "latest"
    },

    "ghcr.io/devcontainers/features/node:1": {
      "version": "lts",
      "pnpmVersion": "none",
      "nvmVersion": "latest"
    },

    // Adds SQLite feature from apt install
    // Also adds the SQLite VSCode extension
    "ghcr.io/warrenbuckley/codespace-features/sqlite:1": {},

    // Adds SMTP4Dev feature from apt install
    "ghcr.io/warrenbuckley/codespace-features/smtp4dev:1": {
      "autorun": true,
      "webport": "5000",
      "smtpport": "25",
      "imapport": "143"
    }
  },

  // This is used in the prebuilds - so dotnet build (nuget restore and node stuff) is done
  "updateContentCommand": "dotnet build umbraco.sln && dotnet dev-certs https --trust",

  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  //"forwardPorts": [5000],

  "portsAttributes": {
    "5000": {
      "label": "SMTP4Dev",
      "protocol": "http",
      "onAutoForward": "notify"
    },
    "11000": {
      "label": "Umbraco HTTP",
      "protocol": "http",
      "onAutoForward": "notify"
    },
    "44339": {
      "label": "Umbraco HTTPS",
      "protocol": "https",
      "onAutoForward": "notify"
    }
  },

  "customizations": {
    "codespaces": {
      "openFiles": [".github/codespaces-readme.md"]
    },

    "vscode": {
      "extensions": ["ms-dotnettools.csharp"]
    }
  }

  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
  // "remoteUser": "root"

  // [Optional] To reuse of your local HTTPS dev cert:
  //
  // 1. Export it locally using this command:
  //    * Windows PowerShell:
  //        dotnet dev-certs https --trust; dotnet dev-certs https -ep "$env:USERPROFILE/.aspnet/https/aspnetapp.pfx" -p "SecurePwdGoesHere"
  //    * macOS/Linux terminal:
  //        dotnet dev-certs https --trust; dotnet dev-certs https -ep "${HOME}/.aspnet/https/aspnetapp.pfx" -p "SecurePwdGoesHere"
  //
  // 2. Uncomment these 'remoteEnv' lines:
  //    "remoteEnv": {
  // 	      "ASPNETCORE_Kestrel__Certificates__Default__Password": "SecurePwdGoesHere",
  //        "ASPNETCORE_Kestrel__Certificates__Default__Path": "/home/vscode/.aspnet/https/aspnetapp.pfx",
  //    },
  //
  // 3. Next, copy your certificate into the container:
  //      1. Start the container
  //      2. Drag ~/.aspnet/https/aspnetapp.pfx into the root of the file explorer
  //      3. Open a terminal in VS Code and run "mkdir -p /home/vscode/.aspnet/https && mv aspnetapp.pfx /home/vscode/.aspnet/https"
}
